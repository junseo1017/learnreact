1. js 비동기의 등장

- 초기 웹 환경에서는 서버에서 모든 데이터를 로드하여 페이지를 빌드했기 때문에, js에서는 별도의 비동기처리가 필요하지 않았음
- AJAX(Asynchronous JavaScript and XML)기술의 등장으로 페이지 로드없이 client-side에서 서버로 요청을 보내 데이터를 처리할 수 있게 됨.
- XMLHttpRequest라는 객체를 이용하여 서버로 요청을 보낼 수 있게 됨.

2. js 비동기의 특징

- single thread이기 때문에, 서버 요청을 기다려야 한다면 유저는 멈춰있는 브라우저를 봐야함
- 서버 통신은 비동기로 처리해줘야 함
- 비동기 요청 후, main thread는 유저의 입력을 받거나, 페이지를 그리는 등의 작업을 처리함.
- 비동기 응답을 받으면 응답을 처리하는 callback 함수를 task queue에 넣음.
- event loop는 callstack이 비었을 때 task queue에서 함수를 꺼내 실행

---

동기(synchronous) : 해당 코드 블록을 실행할 때 thread의 제어권을 넘기지 않고 순서대로 실행하는 것을 의미함.
비동기 : 코드의 순서와 다르게 실행됨. 비동기 코드는 task queue에 들어감.

---

Promise vs Callback

- callback hell에 의한 코드 가독성 하락
- promise를 활용하면 비동기 처리의 순서 조작, 에러 핸들링, 여러 비동기 요청 처리를 쉽게 할 수 있음.

---

Promise

- Promise 객체는 객체가 생성 당시에는 알려지지 않은 데이터에 대한 Proxy
- 비동기 실행이 완료된 후에 '.then','.catch','.finally'등의 핸들러를 붙여 각각 데이터 처리 로직, 에러 처리 로직, 클린업 로직을 실행
- then 체인으로 비동기 실행을 동기처럼 동작하도록 함.

---

Promise

- pending fulfilled rejected 3개의 상태를 가짐
- fulfilled, ejected 두 상태를 settled라고 지칭
- pending은 비동기 실행이 끝나기를 기다리는 상태
- fulfilled는 비동기 실행이 성공한 상태
- rejected 비동기 실행이 실패한 상태
- then,catch는 비동기, 동기 실행 중 어떤 것이라도 return할 수 있음.

---

Multiple Promise handling

- Promise.all() 모든 프로미스가 fulfilled 되길 기다림 (하나라도 에러 발생시 모든 프로미스 요청이 중단됨.)
- promise.allsettled()는 모든 프로미스가 settled되길 기다림
- promise.race()는 넘겨진 프로미스들 중하나라도 settled 되길 기다림
- promise.any()는 넘겨진 프로미스들 중하나라도 fulfilled 되길 기다림

-=======================

POSTMAN
- 서버와의 통신을 위해 API를 활용하는 경우, React 앱으로만 요청하여 API가 잘 동작하는지 알아보는 건 비효율적.
- POSTMAN은 API를 테스트하기 위한 개발 도구
- Auth,header, payload, query 등 api 요청에 필요한 데이터를 쉽게 세팅
- 다른 개발자가 쉽게 셋업해 테스트할 수 있도록 api 정보를 공유할 수 있음.
- request를 모아 collection으로 만들어, api를 종류별로 관리.
- 환경 변수를 정의하여, 환경별로 테스트 가능

-----

Open API
- RESTful API를 하나의 문서로 정의하기 위한 문서 표준
- OpenAPI Specification으로 정의됨.
- Swagger 등의 툴로, Open API로 작성된 문서를 파싱해 테스팅 도구로 만들 수 있음.
- 프론트엔드-백엔드 협업 시 도구로 사용


- api method, endpoint를 정의
- endpoint마다 인증 방식, content type등 정의
- body data, query string, path variable등 정의
- 요청, 응답 데이터 형식과 타입 정의 - data model 활용

-----

CORS (same origin policy 정책)
 - Cross Origin Resource Sharing
 - 브라우저는 모든 요청 시 Origin 헤더를 포함
 - 서버는 Origin 헤더를 보고, 해당 요청이 원하는 도메인에서부터 출발한 것인지 판단
 - 다른 Origin에서 온 요청은 서버에서 기본적으로 거부.

 - 보통 서버의 endpoint와 홈페이지 domain이 다른 경우가 많음.
 - 서버에서는 홈페이지 domain을 허용하여, 다른 domain이라 하더라도 요청을 보낼 수 있게 함.
 - 서버는 헤더에 access-control을 포함한 cors 관련 정보를 클라이언트로 보냄

 - 웹 사이트에 악성 script가 로드되어, 수상한 요청을 하는 것을 막기 위함
 - 반대로, 익명 유저로부터 DDos공격 등을 막기 위함.
 - 서버에 직접 cors 설정을 할 수 없다면, proxy 서버 등을 만들어 해결

-----

