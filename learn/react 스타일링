좋은 앱?
- 번들 사이즈에 대한 고려
> css 코드가 차지하는 사이즈는 매우 중요한 요소

- 앱 성능에 대한 고려
> animation, transition 등 유저와의 상호작용에서 스타일 코드이 성능이 중요

- 사용자에게 유리한 ui us
> 스타일링에 대한 지식으로 고급 테크닉을 적용하여 더 나은 UI/UX를 반영

- 자바스크립트를 이용한 다양한 스타일 기법
> UI 토글링, 애니메이션, 다크모드, 등은 자바스크립트에 대한 지식만으로 구현하기 힘듦

- 유지보수 용이하고 확장 가능한 코드
> 스타일에 관련된 코드를 어떻게 작성하고 관리하는가에 대한 지식이 필요

----

3가지 방법 존재

CSS import
- CSS파일을 import해서 사용.
- 필요한 모든 css 스타일을 하나의 파일에 작성하여, js파일과 코드 분리 가능

장/단점
- css파일만을 import하여 사용할 수 있어 편리
- css파일은 분리할 수 있으나, namespace를 나눌 수 없음
- 스타일이 겹칠 경우, cascading규칙에 따라, 마지막에 나온 룰이 덮어씌워짐


CSS module
- 하나의 css module 파일 안에 작성한 스타일은 하나의 파일 namespace로 관리
- class name 뒤에 겹치지 않는 hash를 붙여서 스타일이 겹치는 상황을 해결

CSS in JS
- 별도의 css파일을 만들지 않고 하나의 컴포넌트 파일 안에서 스타일을 작성
- react 컴포넌트를 사용하는 것처럼 사용
- sass 문법 활용 가능 

----

styled-components
- 자바스크립트 파일 안에 스타일을 정의하고, React 컴포넌트처럼 활용
- 자바스크립트 코드와 긴밀히 연계하여 다양한 코드를 작성할 수 있음
- 별도의 css 파일을 만들지 않고 하나의 파일 안에 스타일을 관리하고 싶을 때 유리
- 스타일 코드와 컴포넌트 코드 간의 결합을 나누고 싶을 때 유리

특징
- tagged template literal이라는 문법을 활용
- css 코드에 post-css,minification, sass 적용
- css 코드를 겹치지 않게 처리
- 클래스 이름 자체가 hash